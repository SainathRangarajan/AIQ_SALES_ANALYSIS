import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
from concurrent.futures import ThreadPoolExecutor
from snowflake.connector import connect
from snowflake.connector.pandas_tools import write_pandas

#Database Connection details
snowflake_cn = connect(
            user="Sainath",
            password='Aiq_Sales_Analysis1',
            role="ACCOUNTADMIN",
            account="zghrtlg-ux53095",
            database='AIQ_KLANIK_ASSIGNMENT',
            warehouse="COMPUTE_WH",
            schema="DBO"
            )
schema = 'DBO'
database = 'AIQ_KLANIK_ASSIGNMENT'



# Creates the lat and long closer to Customer lat long co ordinates simulating various stores location near by
def generate_store_lat_long (x):
    return float(x)+np.random.uniform(-0.1, 0.1)
    
    

# This function can return the weather on a specific date,however it's not available for trail accounts so I've attached a sample code to get historic data.    
# def get_weather(lat, long):
#     api_key = '36745bf54189b65e651e0768daa374ee'
#     base_url = 'https://api.openweathermap.org/data/2.5/weather'
#     params = {
#         'lat': lat,
#         'lon': long,
#         'type': hour,
#         'start':date,
#         'end':date
#         'appid': api_key,
#         'units': 'metric'
#     }
#     response = requests.get(base_url, params=params)
#     if response.status_code == 200:
#         weather_data = response.json()
#         weather_condition=weather_data['weather'][0]['description']
#         temperature = weather_data['main']['temp']
#         pressure = weather_data['main']['pressure']
#         humidity = weather_data['main']['humidity']
#         wind_speed = weather_data['wind']['speed']
#         return weather_condition, temperature, pressure, humidity, wind_speed
#     else:
#         return 'Error fetching weather data', None, None, None, None


#get weather information using the Latitude and Longitude generated by generate_store_lat_long function
def get_weather(lat, long):
    api_key = '36745bf54189b65e651e0768daa374ee'
    base_url = 'https://api.openweathermap.org/data/2.5/weather'
    params = {
        'lat': lat,
        'lon': long,
        'appid': api_key,
        'units': 'metric'
    }
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        weather_data = response.json()
        weather_condition=weather_data['weather'][0]['description']
        temperature = weather_data['main']['temp']
        pressure = weather_data['main']['pressure']
        humidity = weather_data['main']['humidity']
        wind_speed = weather_data['wind']['speed']
        return weather_condition, temperature, pressure, humidity, wind_speed
    else:
        return 'Error fetching weather data', None, None, None, None


#this function is created because without this, the request was taking too long for 1000 rows of data
def fetch_weather_concurrently(df):
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = list(executor.map(get_weather,merged_df['address.geo.lat'], merged_df['address.geo.lng']))
    return results

#Function to write dataframe into Database
def write_into_DB(df,table_name):
    success, num_chunks, num_rows, _ = write_pandas(
        conn=snowflake_cn,
        df=df,
        table_name=table_name,
        database=database,
        schema=schema,
        auto_create_table=True
        )
    print("Insert_Complete")
    if success:
        a=str(num_rows)+"Inserted"
        print(a)


#Reading Data from JSON API
url='https://jsonplaceholder.typicode.com/users'
response = requests.get(url)
rep = response.json()
users = pd.json_normalize(rep)
write_into_DB(users,'USER')


# Reads data from the given csv file
sales_data=pd.read_csv("C:/Users/SainathRangarajan/Downloads/sales_data.csv")
write_into_DB(sales_data,'SALES_DATA')

#modifies timestamp column to date column
sales_data['date'] = pd.to_datetime(sales_data['order_date'])

#Creates columns extracting month,year and quarter from the date column
sales_data = sales_data.assign(month=sales_data['date'].dt.month,year=sales_data['date'].dt.year,quarter=sales_data['date'].dt.quarter)    

#Calculates Total Line total
sales_data['line_total']=sales_data['price']*sales_data['quantity']

#joining User and Sales Data based on id and Customer_id column
merged_df = pd.merge(users, sales_data, left_on='id', right_on='customer_id', how='inner')

#Generates fictional latitude and Longitude  based on Customer's Latitude and Longitude
merged_df['store_lat']=list(map(generate_store_lat_long,merged_df['address.geo.lat']))
merged_df['store_long']=list(map(generate_store_lat_long,merged_df['address.geo.lng']))

#Calls the Function to get weather information from Open Weather API
merged_df[['weather_condition','temperature','pressure','humidity','wind_speed']] = fetch_weather_concurrently(merged_df)

#To Calculate Total Sales by Each Customer
sales_by_customer=merged_df.groupby('id').agg(total_sales=('line_total', 'sum')).reset_index()
sales_by_customer=sales_by_customer.rename(columns={"id": "Customer_id"})
write_into_DB(sales_by_customer,'CUSTOMER_SALES')

#To Calculate Avg Quantity of Sales for Each Product
avg_qty=merged_df.groupby('product_id').agg(avg_quantity=('quantity', 'mean')).reset_index()
write_into_DB(avg_qty,'PRODUCT_AVG_QTY')

#To Calculate Monthly Sales
monthly_sales=merged_df.groupby(['year','month']).agg(monthly_sales=('line_total','sum')).reset_index()
write_into_DB(monthly_sales,'MONTHLY_SALES')

#To Calculate Quarterly Sales
quarterly_sales =merged_df.groupby(['year','quarter']).agg(quarterly_sales=('line_total','sum')).reset_index()
write_into_DB(monthly_sales,'QUARTERLY_SALES')

#To Calculate Avg Sales by Weather Condition
avg_sales_by_weather=merged_df.groupby('weather_condition').agg(avg_sales=('line_total','mean')).reset_index()
write_into_DB(monthly_sales,'AVG_SALES_BY_WEATHER')

#Bar Graph plotted with X Axis as Months and Y Axis as Monthly Sales
Monthly_Sales_Graph = px.bar(monthly_sales, x='month', y='monthly_sales', color='year',
             labels={'month': 'Month', 'monthly_sales': 'Monthly Sales', 'year': 'Year'},
             title='Monthly Sales Data from June 2022 to June 2023',
             hover_name='monthly_sales', hover_data={'monthly_sales': ':,.2f'})
Monthly_Sales_Graph.show()

#Bar Graph plotted with X Axis as Quarters and Y Axis as Quarterly Sales
Quarterly_Sales_Graph = px.bar(quarterly_sales, x='quarter', y='quarterly_sales', color='year',
             labels={'Quarter': 'Month', 'quarterly_sales': 'Quarterly Sales', 'year': 'Year'},
             title='Quarterly Sales Data from June 2022 to June 2023',
             hover_name='Quarterly_sales', hover_data={'quarterly_sales': ':,.2f'})
Quarterly_Sales_Graph.show()

#Bar Graph plotted with X Axis as Weather Conditions and Y Axis as Average Sales
plt.figure(figsize=(5, 3))
plt.bar(avg_sales_by_weather['weather_condition'], avg_sales_by_weather['avg_sales'], color='skyblue')
plt.xlabel('Weather Condition')
plt.ylabel('Average Sales')
plt.title('Average Sales by Weather Condition')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
plt.grid(axis='y')  # Add horizontal grid lines
plt.tight_layout()  # Adjust layout to prevent clipping labels
plt.show()
